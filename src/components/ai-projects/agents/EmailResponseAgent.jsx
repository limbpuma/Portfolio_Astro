import { useState } from 'react';

const EmailResponseAgent = ({ config, translations = {}, locale = 'en' }) => {
  const [currentStep, setCurrentStep] = useState('input');
  const [incomingEmail, setIncomingEmail] = useState('');
  const [responseType, setResponseType] = useState('professional');
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedResponse, setGeneratedResponse] = useState('');
  const [copySuccess, setCopySuccess] = useState(false);

  // Get translations for the agent
  const t = translations.AGENTS?.EMAIL_RESPONSE || {};

  // Default fallback texts
  const getText = (key, fallback) => {
    return t[key] || fallback;
  };

  const responseTypes = {
    'professional': {
      name: getText('TYPE_PROFESSIONAL', 'üíº Professional'),
      description: getText('TYPE_PROFESSIONAL_DESC', 'Formal response for clients or colleagues'),
      tone: 'formal y cort√©s'
    },
    'friendly': {
      name: getText('TYPE_FRIENDLY', 'üòä Friendly'),
      description: getText('TYPE_FRIENDLY_DESC', 'Warm but professional response'),
      tone: 'amigable y cercano'
    },
    'brief': {
      name: getText('TYPE_BRIEF', '‚ö° Brief'),
      description: getText('TYPE_BRIEF_DESC', 'Concise and direct response'),
      tone: 'conciso y directo'
    },
    'apologetic': {
      name: getText('TYPE_APOLOGETIC', 'üôè Apologetic'),
      description: getText('TYPE_APOLOGETIC_DESC', 'For problems, delays, or errors'),
      tone: 'emp√°tico y solucionador'
    },
    'payment': {
      name: getText('TYPE_PAYMENT', 'üí∞ Payment/Billing'),
      description: getText('TYPE_PAYMENT_DESC', 'For payment or invoice matters'),
      tone: 'responsable y solucionador'
    }
  };

  const exampleEmails = {
    complaint: "Hola, estoy muy molesto porque mi pedido #12345 lleg√≥ 3 d√≠as tarde y algunos productos est√°n da√±ados. Esto es inaceptable, necesito una soluci√≥n inmediata. Saludos, Juan P√©rez",
    
    inquiry: "Buenos d√≠as, estoy interesado en sus servicios de consultor√≠a para mi empresa. Somos una startup de 15 empleados en el sector fintech. ¬øPodr√≠an enviarme informaci√≥n sobre precios y disponibilidad? Gracias, Mar√≠a Gonz√°lez",
    
    meeting: "Hola, necesito reprogramar la reuni√≥n de ma√±ana a las 10am porque surgi√≥ una emergencia familiar. ¬øSer√≠a posible moverla al jueves a la misma hora? Disculpas por el inconveniente, Carlos L√≥pez",
    
    payment: "Hola Carlos, te env√≠o por d√©cima vez el email para recordarte que me debes 500‚Ç¨. Si no me pagas te demandar√©. Atentamente, Roger"
  };

  const generateResponse = async () => {
    if (!incomingEmail.trim()) return;
    
    setIsGenerating(true);
    setCurrentStep('generating');
    
    // Simular procesamiento de IA
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    const response = createIntelligentResponse(incomingEmail, responseType);
    setGeneratedResponse(response);
    setCurrentStep('result');
    setIsGenerating(false);
  };

  const createIntelligentResponse = (email, type) => {
    const emailLower = email.toLowerCase();
    const responseConfig = responseTypes[type];
    
    // Analizar el contenido del email con mayor precisi√≥n
    const isComplaint = emailLower.includes('molesto') || emailLower.includes('problema') || emailLower.includes('inaceptable') || emailLower.includes('mal') || emailLower.includes('terrible') || emailLower.includes('fatal');
    const isInquiry = emailLower.includes('informaci√≥n') || emailLower.includes('interesado') || emailLower.includes('precio') || emailLower.includes('servicio') || emailLower.includes('consulta') || emailLower.includes('cotizaci√≥n');
    const isMeeting = emailLower.includes('reuni√≥n') || emailLower.includes('cita') || emailLower.includes('reprogramar') || emailLower.includes('mover') || emailLower.includes('cambiar') || emailLower.includes('agenda');
    const isFollowup = emailLower.includes('propuesta') || emailLower.includes('envi√©') || emailLower.includes('enviado') || emailLower.includes('revisado') || emailLower.includes('semana') || emailLower.includes('recordar');
    const isPayment = emailLower.includes('pago') || emailLower.includes('deuda') || emailLower.includes('debo') || emailLower.includes('debes') || emailLower.includes('‚Ç¨') || emailLower.includes('euro') || emailLower.includes('dinero') || emailLower.includes('factura') || emailLower.includes('demanda');
    const isThreat = emailLower.includes('demandare') || emailLower.includes('abogado') || emailLower.includes('legal') || emailLower.includes('tribunal') || emailLower.includes('amenaza');
    const isUrgent = emailLower.includes('urgente') || emailLower.includes('inmediato') || emailLower.includes('ya') || emailLower.includes('ahora') || emailLower.includes('decima vez');
    
    // Extraer nombre si est√° presente (mejora la detecci√≥n)
    const nameMatch = email.match(/([A-Z][a-z]+(?:\s+[A-Z][a-z]+)?)/);
    const senderName = nameMatch ? nameMatch[1] : '';
    const firstName = senderName ? senderName.split(' ')[0] : '';
    const greeting = firstName ? `Estimado/a ${firstName}` : 'Estimado/a';
    
    // Generar respuesta espec√≠fica seg√∫n el contexto (orden de prioridad)
    if (isPayment || isThreat) {
      return generatePaymentResponse(greeting, responseConfig.tone, email, firstName);
    } else if (isComplaint) {
      return generateComplaintResponse(greeting, responseConfig.tone, email);
    } else if (isInquiry) {
      return generateInquiryResponse(greeting, responseConfig.tone, email);
    } else if (isMeeting) {
      return generateMeetingResponse(greeting, responseConfig.tone, email);
    } else if (isFollowup) {
      return generateFollowupResponse(greeting, responseConfig.tone, email);
    } else {
      return generateGenericResponse(greeting, responseConfig.tone, email);
    }
  };

  const generateComplaintResponse = (greeting, tone, email) => {
    const templates = {
      'formal y cort√©s': `${greeting},

Gracias por contactarnos y lamento mucho los inconvenientes que ha experimentado con su pedido.

Entiendo completamente su frustraci√≥n y quiero asegurarle que vamos a resolver esta situaci√≥n de inmediato. He escalado su caso a nuestro equipo de atenci√≥n prioritaria.

Las acciones que tomaremos son:
‚Ä¢ Investigaci√≥n inmediata del problema en su pedido
‚Ä¢ Env√≠o de productos de reemplazo sin costo adicional
‚Ä¢ Cr√©dito en su cuenta por las molestias ocasionadas

Me pondr√© en contacto con usted en las pr√≥ximas 2 horas con una actualizaci√≥n detallada.

Apreciamos su paciencia y la oportunidad de corregir esta situaci√≥n.

Cordialmente,
[Su nombre]`,
      
      'amigable y cercano': `¬°Hola!

Primero que todo, mil disculpas por lo que pas√≥ con tu pedido. Definitivamente no es la experiencia que queremos que tengas con nosotros.

Ya estoy revisando tu caso personalmente y vamos a solucionarlo hoy mismo. Te propongo:

‚úì Te enviamos productos nuevos inmediatamente (llegada garantizada ma√±ana)
‚úì Te devolvemos el costo del env√≠o
‚úì Un descuento del 20% en tu pr√≥xima compra

Te escribo en m√°ximo 2 horas con el n√∫mero de seguimiento y todos los detalles.

¬°Gracias por darnos la oportunidad de arreglarlo!

Saludos,
[Tu nombre]`,
      
      'conciso y directo': `${greeting},

Disculpas por los problemas con su pedido #12345.

Soluci√≥n inmediata:
- Productos de reemplazo enviados hoy
- Reembolso del env√≠o procesado
- Seguimiento por email en 2 horas

Gracias por su comprensi√≥n.

[Su nombre]`,
      
      'emp√°tico y solucionador': `${greeting},

Lamento profundamente que haya tenido esta experiencia con nosotros. Su frustraci√≥n es completamente comprensible y justificada.

Quiero asegurarle que esto no refleja nuestros est√°ndares habituales de servicio. He priorizado su caso y trabajar√© personalmente para resolverlo.

Plan de acci√≥n inmediato:
1. Investigaci√≥n completa del problema (hoy)
2. Env√≠o urgente de productos de reemplazo (ma√±ana)
3. Compensaci√≥n por las molestias causadas
4. Seguimiento directo hasta su completa satisfacci√≥n

Le escribir√© con actualizaciones cada paso del camino.

Mis sinceras disculpas nuevamente.

[Su nombre]`
    };
    
    return templates[tone] || templates['formal y cort√©s'];
  };

  const generateInquiryResponse = (greeting, tone, email) => {
    const templates = {
      'formal y cort√©s': `${greeting},

Gracias por su inter√©s en nuestros servicios de consultor√≠a.

Nos complace saber que est√° considerando nuestros servicios para su empresa fintech. Entendemos las necesidades espec√≠ficas del sector y tenemos experiencia trabajando con startups en crecimiento.

Para proporcionarle una propuesta personalizada, me gustar√≠a programar una llamada de 30 minutos donde podamos:
‚Ä¢ Entender mejor sus objetivos espec√≠ficos
‚Ä¢ Revisar sus necesidades actuales
‚Ä¢ Presentarle nuestros paquetes de servicios
‚Ä¢ Discutir opciones de precios adaptadas a su presupuesto

¬øTendr√≠a disponibilidad esta semana para una videoconferencia? Puedo adaptarme a su horario preferido.

Espero su respuesta para coordinar nuestra conversaci√≥n.

Cordialmente,
[Su nombre]`,
      
      'amigable y cercano': `¬°Hola Mar√≠a!

¬°Qu√© emocionante saber de tu startup fintech! Me encanta trabajar con empresas en crecimiento como la tuya.

Definitivamente podemos ayudarte. Tenemos experiencia espec√≠fica con startups de tu tama√±o y entendemos los desaf√≠os √∫nicos del sector financiero.

Te propongo que tengamos una llamada r√°pida (30 min m√°ximo) donde pueda:
‚Ä¢ Conocer mejor tu empresa y objetivos
‚Ä¢ Mostrarte casos de √©xito similares
‚Ä¢ Explicarte nuestros paquetes y precios
‚Ä¢ Responder todas tus preguntas

¬øQu√© tal si coordinamos para esta semana? Puedo adaptarme a tu horario.

¬°Espero poder colaborar contigo!

Saludos,
[Tu nombre]`,
      
      'conciso y directo': `${greeting},

Gracias por su consulta sobre servicios de consultor√≠a.

Propuesta:
- Llamada de evaluaci√≥n (30 min)
- Presentaci√≥n de paquetes para startups
- Cotizaci√≥n personalizada
- Casos de √©xito en fintech

Disponibilidad esta semana para videoconferencia.

Favor confirmar horario preferido.

[Su nombre]`,
      
      'emp√°tico y solucionador': `${greeting},

Agradezco enormemente que haya pensado en nosotros para acompa√±ar el crecimiento de su empresa.

Entiendo que como startup cada decisi√≥n es crucial y quiero asegurarme de que tengamos la mejor propuesta para ustedes. He trabajado con varias empresas fintech en etapa de crecimiento y conozco los desaf√≠os espec√≠ficos que enfrentan.

Me gustar√≠a proponerle una consulta inicial sin compromiso donde podamos:
‚Ä¢ Evaluar sus necesidades espec√≠ficas
‚Ä¢ Compartir estrategias que han funcionado para empresas similares
‚Ä¢ Dise√±ar una propuesta que se ajuste a su presupuesto y objetivos

¬øLe parece bien que coordinemos una llamada esta semana?

Estoy aqu√≠ para apoyar el √©xito de su empresa.

[Su nombre]`
    };
    
    return templates[tone] || templates['formal y cort√©s'];
  };

  const generateMeetingResponse = (greeting, tone, email) => {
    const templates = {
      'formal y cort√©s': `${greeting},

Por supuesto, comprendo perfectamente que las emergencias familiares son prioritarias.

No hay ning√∫n problema en reprogramar nuestra reuni√≥n del martes 10am para el jueves a la misma hora. He actualizado mi calendario y le he enviado una nueva invitaci√≥n para el jueves 10am.

Espero que todo se resuelva satisfactoriamente con su familia.

Nos vemos el jueves.

Cordialmente,
[Su nombre]`,
      
      'amigable y cercano': `¬°Hola Carlos!

¬°Por supuesto que no hay problema! Las emergencias familiares siempre van primero.

Ya mov√≠ nuestra reuni√≥n para el jueves a las 10am. Te llegar√° la nueva invitaci√≥n de calendario en unos minutos.

Espero que todo est√© bien con tu familia. ¬°Nos vemos el jueves!

Saludos,
[Tu nombre]`,
      
      'conciso y directo': `${greeting},

Reuni√≥n reprogramada:
- Nueva fecha: Jueves 10am
- Invitaci√≥n de calendario enviada
- Sin problema alguno

Nos vemos el jueves.

[Su nombre]`,
      
      'emp√°tico y solucionador': `${greeting},

Absolutamente, las emergencias familiares siempre tienen prioridad. No se preocupe en absoluto por el cambio.

He reprogramado nuestra reuni√≥n para el jueves a las 10am y le he enviado la nueva invitaci√≥n de calendario. 

Espero sinceramente que la situaci√≥n familiar se resuelva de la mejor manera posible.

Estar√© disponible si necesita cambiar algo m√°s.

[Su nombre]`
    };
    
    return templates[tone] || templates['formal y cort√©s'];
  };

  const generateFollowupResponse = (greeting, tone, email) => {
    const templates = {
      'formal y cort√©s': `${greeting},

Gracias por el seguimiento de su propuesta para el proyecto de desarrollo web.

He revisado su propuesta detalladamente y debo decir que est√° muy bien estructurada. El equipo directivo se reunir√° ma√±ana para la evaluaci√≥n final de todas las propuestas recibidas.

Esperamos tomar una decisi√≥n hacia finales de esta semana y le comunicaremos el resultado inmediatamente, independientemente de cu√°l sea.

Agradezco su paciencia durante este proceso de selecci√≥n.

Cordialmente,
[Su nombre]`,
      
      'amigable y cercano': `¬°Hola Ana!

¬°Gracias por record√°rmelo! Definitivamente no se me hab√≠a olvidado tu propuesta.

La verdad es que me gust√≥ mucho lo que presentaste. Tenemos reuni√≥n de equipo ma√±ana donde vamos a decidir entre las propuestas finalistas (incluyendo la tuya, por supuesto).

Te prometo que a m√°s tardar el viernes te doy una respuesta definitiva. ¬°Cruza los dedos!

Saludos,
[Tu nombre]`,
      
      'conciso y directo': `${greeting},

Su propuesta est√° en evaluaci√≥n final.

Decisi√≥n: Finales de esta semana
Comunicaci√≥n: Inmediata tras decisi√≥n
Estado: Entre propuestas finalistas

Gracias por su paciencia.

[Su nombre]`,
      
      'emp√°tico y solucionador': `${greeting},

Agradezco mucho su seguimiento y comprendo perfectamente la importancia de tener una respuesta clara.

Su propuesta ha causado una excelente impresi√≥n en el equipo y definitivamente est√° entre nuestras opciones principales. Estamos en la fase final de evaluaci√≥n.

Me comprometo a darle una respuesta definitiva antes del viernes, junto con comentarios detallados sin importar cu√°l sea la decisi√≥n.

Valoro mucho su profesionalismo y el tiempo que invirti√≥ en la propuesta.

[Su nombre]`
    };
    
    return templates[tone] || templates['formal y cort√©s'];
  };

  const generateGenericResponse = (greeting, tone, email) => {
    const templates = {
      'formal y cort√©s': `${greeting},

Gracias por su mensaje.

He recibido su comunicaci√≥n y la estoy revisando cuidadosamente. Me pondr√© en contacto con usted en las pr√≥ximas 24 horas con una respuesta detallada.

Si tiene alguna consulta urgente, no dude en contactarme directamente.

Cordialmente,
[Su nombre]`,
      
      'amigable y cercano': `¬°Hola!

Gracias por escribirme. 

He recibido tu mensaje y lo voy a revisar con cuidado. Te respondo ma√±ana con toda la informaci√≥n que necesitas.

¬°Saludos!
[Tu nombre]`,
      
      'conciso y directo': `${greeting},

Mensaje recibido.
Respuesta detallada en 24 horas.

[Su nombre]`,
      
      'emp√°tico y solucionador': `${greeting},

Agradezco que se haya tomado el tiempo de escribirme.

Voy a revisar su mensaje detenidamente para asegurarme de darle la mejor respuesta posible. Me comunicar√© con usted ma√±ana con toda la informaci√≥n necesaria.

[Su nombre]`
    };
    
    return templates[tone] || templates['formal y cort√©s'];
  };

  const generatePaymentResponse = (greeting, tone, email, firstName) => {
    const templates = {
      'formal y cort√©s': `${greeting},

Gracias por su mensaje.

He recibido su comunicaci√≥n respecto al pago pendiente. Entiendo su preocupaci√≥n y quiero aclarar la situaci√≥n de inmediato.

Perm√≠tame revisar los detalles de la transacci√≥n y me pondr√© en contacto con usted dentro de las pr√≥ximas 24 horas con una respuesta completa y un plan de resoluci√≥n.

Agradezco su paciencia mientras resuelvo este asunto.

Cordialmente,
[Su nombre]`,
      
      'amigable y cercano': `Hola ${firstName || ''},

Gracias por record√°rmelo. Tienes raz√≥n y disculpa la demora.

He visto tu mensaje sobre el pago pendiente. Voy a revisar mi situaci√≥n financiera y te contacto ma√±ana con una propuesta de pago que funcione para ambos.

Aprecio tu paciencia.

Saludos,
[Tu nombre]`,
      
      'conciso y directo': `${greeting},

Pago pendiente recibido.

Revisi√≥n: 24 horas
Propuesta de pago: Ma√±ana
Contacto directo: Garantizado

Gracias por la paciencia.

[Su nombre]`,
      
      'emp√°tico y solucionador': `${greeting},

Recib√≠ tu mensaje y entiendo completamente tu frustraci√≥n. Tienes todo el derecho de estar molesto por la demora en el pago.

Quiero ser completamente transparente contigo: he tenido algunas dificultades financieras temporales, pero esto no justifica la falta de comunicaci√≥n de mi parte.

Mi compromiso:
1. Revisar los detalles exactos del monto adeudado
2. Contactarte ma√±ana con un plan de pago espec√≠fico
3. Mantener comunicaci√≥n regular hasta resolver completamente

Valoro nuestra relaci√≥n y voy a solucionar esto de manera responsable.

[Su nombre]`,

      'responsable y solucionador': `${greeting},

He recibido su mensaje respecto al pago pendiente y asumo completa responsabilidad por esta situaci√≥n.

Entiendo su molestia y preocupaci√≥n. Reconozco que el retraso en el pago y la falta de comunicaci√≥n de mi parte no son aceptables.

Plan de acci√≥n inmediato:
‚Ä¢ Revisi√≥n completa de la cuenta pendiente (hoy)
‚Ä¢ Propuesta de plan de pago (ma√±ana antes de las 12pm)
‚Ä¢ Primera transferencia parcial (esta semana)
‚Ä¢ Cronograma de pagos restantes con fechas espec√≠ficas

Me comprometo a resolver esta situaci√≥n de manera profesional y responsable. Le enviar√© una actualizaci√≥n detallada ma√±ana temprano.

Atentamente,
[Su nombre]`
    };
    
    return templates[tone] || templates['responsable y solucionador'];
  };

  const copyToClipboard = () => {
    navigator.clipboard.writeText(generatedResponse).then(() => {
      setCopySuccess(true);
      setTimeout(() => setCopySuccess(false), 2000);
    });
  };

  const resetGenerator = () => {
    setCurrentStep('input');
    setIncomingEmail('');
    setGeneratedResponse('');
    setCopySuccess(false);
  };

  return (
    <div className="max-w-4xl mx-auto p-6">
      <div className="bg-gradient-to-br from-blue-50 to-green-50 rounded-2xl p-8 border border-blue-200">
        <div className="text-center mb-8">
          <h2 className="text-3xl font-bold text-gray-800 mb-4">
            {getText('TITLE', 'üìß Email Response Generator')}
          </h2>
          <p className="text-lg text-gray-600 max-w-3xl mx-auto">
            {getText('SUBTITLE', 'Generate professional email responses with AI')}
          </p>
        </div>

        {currentStep === 'input' && (
          <div className="space-y-6">
            {/* Tipo de Respuesta */}
            <div className="bg-white rounded-xl p-6 border border-gray-200">
              <h3 className="text-xl font-semibold text-gray-800 mb-4">
                {getText('RESPONSE_TYPES', 'üìù Choose Response Style:')}
              </h3>
              <div className="grid md:grid-cols-3 gap-4">
                {Object.entries(responseTypes).map(([key, config]) => (
                  <div
                    key={key}
                    className={`p-4 rounded-lg border-2 cursor-pointer transition-all ${
                      responseType === key 
                        ? 'border-blue-500 bg-blue-50' 
                        : 'border-gray-200 hover:border-blue-300'
                    }`}
                    onClick={() => setResponseType(key)}
                  >
                    <div className="font-medium text-gray-800">{config.name}</div>
                    <div className="text-sm text-gray-600 mt-1">{config.description}</div>
                  </div>
                ))}
              </div>
            </div>

            {/* Input del Email */}
            <div className="bg-white rounded-xl p-6 border border-gray-200">
              <h3 className="text-xl font-semibold text-gray-800 mb-4">
                {getText('INPUT_TITLE', 'ÔøΩ Incoming Email')}
              </h3>
              <div className="space-y-4">
                <textarea
                  value={incomingEmail}
                  onChange={(e) => setIncomingEmail(e.target.value)}
                  placeholder={getText('INPUT_PLACEHOLDER', 'Paste the email you want to respond to...')}
                  className="w-full p-4 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
                  rows="6"
                />
                <button
                  onClick={generateResponse}
                  disabled={!incomingEmail.trim()}
                  className="w-full px-6 py-3 bg-gradient-to-r from-blue-500 to-green-600 text-white rounded-lg hover:from-blue-600 hover:to-green-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-300 font-medium"
                >
                  {getText('GENERATE_BUTTON', 'üöÄ Generate Response')}
                </button>
              </div>
            </div>

            {/* Ejemplos */}
            <div className="bg-white rounded-xl p-6 border border-gray-200">
              <h4 className="font-semibold text-gray-800 mb-3">{getText('EXAMPLES_TITLE', 'ÔøΩ Try Examples:')}</h4>
              <div className="grid md:grid-cols-2 gap-4 text-sm">
                {Object.entries(exampleEmails).map(([key, email]) => (
                  <div 
                    key={key}
                    className="p-3 bg-gray-50 rounded-lg cursor-pointer hover:bg-gray-100 transition-colors"
                    onClick={() => setIncomingEmail(email)}
                  >
                    <div className="font-medium text-gray-700 mb-2">
                      {key === 'complaint' && getText('EXAMPLE_COMPLAINT', 'ÔøΩ Customer Complaint')}
                      {key === 'inquiry' && getText('EXAMPLE_INQUIRY', '‚ùì Business Inquiry')}
                      {key === 'meeting' && getText('EXAMPLE_MEETING', 'üìÖ Meeting Request')}
                      {key === 'payment' && getText('EXAMPLE_PAYMENT', 'üí∞ Payment Reminder')}
                    </div>
                    <div className="text-xs text-gray-600 line-clamp-3">
                      {email.substring(0, 120)}...
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}

        {currentStep === 'generating' && (
          <div className="text-center space-y-6">
            <div className="animate-spin w-16 h-16 border-4 border-blue-200 border-t-blue-600 rounded-full mx-auto"></div>
            <div>
              <h3 className="text-xl font-semibold text-gray-800 mb-2">
                ‚ú® Generando respuesta {responseTypes[responseType].name.toLowerCase()}...
              </h3>
              <p className="text-gray-600">
                Analizando contexto y creando respuesta personalizada
              </p>
            </div>
          </div>
        )}

        {currentStep === 'result' && generatedResponse && (
          <div className="space-y-6">
            <div className="text-center mb-6">
              <h3 className="text-2xl font-semibold text-gray-800 mb-2">
                ‚úÖ Respuesta Generada
              </h3>
              <p className="text-gray-600">
                Estilo: <span className="font-semibold text-blue-600">
                  {responseTypes[responseType].name}
                </span>
              </p>
            </div>

            {/* Respuesta Generada */}
            <div className="bg-white rounded-xl p-6 border border-gray-200">
              <div className="flex justify-between items-center mb-4">
                <h4 className="font-semibold text-gray-800">üìù Tu Respuesta Lista</h4>
                <button
                  onClick={copyToClipboard}
                  className={`px-4 py-2 rounded-lg transition-all ${
                    copySuccess 
                      ? 'bg-green-500 text-white' 
                      : 'bg-blue-500 text-white hover:bg-blue-600'
                  }`}
                >
                  {copySuccess ? (translations.AGENTS?.COPY_SUCCESS || '‚úÖ Copied to clipboard!') : (translations.AGENTS?.COPY_BUTTON || 'üìã Copy to Clipboard')}
                </button>
              </div>
              <div className="bg-gray-50 rounded-lg p-4 font-mono text-sm whitespace-pre-wrap">
                {generatedResponse}
              </div>
            </div>

            {/* Email Original */}
            <div className="bg-white rounded-xl p-6 border border-gray-200">
              <h4 className="font-semibold text-gray-800 mb-4">üì® Email Original</h4>
              <div className="bg-gray-50 rounded-lg p-4 text-sm text-gray-700">
                {incomingEmail}
              </div>
            </div>

            <div className="text-center space-x-4">
              <button
                onClick={() => setCurrentStep('input')}
                className="px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-all duration-300"
              >
                üîÑ Generar Otra Respuesta
              </button>
              <button
                onClick={resetGenerator}
                className="px-6 py-3 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-all duration-300"
              >
                üÜï Nuevo Email
              </button>
            </div>
          </div>
        )}

        {/* M√©tricas de Utilidad */}
        <div className="mt-8 pt-6 border-t border-gray-200">
          <h4 className="text-center text-lg font-semibold text-gray-800 mb-4">
            üíº Beneficios del Generador
          </h4>
          <div className="grid md:grid-cols-4 gap-4 text-center">
            <div className="bg-white rounded-lg p-4 border border-gray-200">
              <div className="text-2xl font-bold text-blue-600">95%</div>
              <div className="text-sm text-gray-600">Tiempo Ahorrado</div>
            </div>
            <div className="bg-white rounded-lg p-4 border border-gray-200">
              <div className="text-2xl font-bold text-green-600">100%</div>
              <div className="text-sm text-gray-600">Profesionalismo</div>
            </div>
            <div className="bg-white rounded-lg p-4 border border-gray-200">
              <div className="text-2xl font-bold text-purple-600">5</div>
              <div className="text-sm text-gray-600">Estilos de Respuesta</div>
            </div>
            <div className="bg-white rounded-lg p-4 border border-gray-200">
              <div className="text-2xl font-bold text-orange-600">30s</div>
              <div className="text-sm text-gray-600">Tiempo de Generaci√≥n</div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default EmailResponseAgent;
